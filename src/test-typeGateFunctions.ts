import { expect } from 'chai';
import { assert } from 'chai';
import { describe } from 'mocha';
import { JsTypeCommander } from '../dist/JsTypeCommander';
import { log, error, debug } from 'util';
import { truncate } from 'fs';
import * as TL from './testLib';
describe("Testing type gate functions", function() {
    let functionTypeGroups: TL.IFunctionTypeGroup[] = [
        TL.functionTypeGroup('nil gate',
            TL.testFunction(JsTypeCommander.notDefined, 'notDefined', '(obj?: TDefined): obj is undefined',
                TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
            TL.testFunction(JsTypeCommander.isNull, 'isNull', '(obj?: TDefined): obj is undefined',
                TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
            TL.testFunction(JsTypeCommander.isNil, 'isNil', '(obj?: TDefined): obj is undefined',
                TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
            TL.expectEqualToFalse(TL.argSet(() => [NaN], 'NaN'), TL.argSet(() => [0], '0'), TL.argSet(() => [false], 'false'), TL.argSet(() => [""], '""'), TL.argSet(() => [{}], '{}'), TL.argSet(() => [[]], '[]'))
        ),
        TL.functionTypeGroup('string gate',
            TL.functionGroup('Testing type gate functions for any string',
                TL.testFunction(JsTypeCommander.isString, 'isString', '(obj?: TDefined): obj is string'),
                TL.testFunction(JsTypeCommander.isStringIfDef, 'isStringIfDef', '(obj?: TDefined): obj is string | undefined'),
                TL.testFunction(JsTypeCommander.isStringOrNull, 'isStringOrNull', '(obj?: TDefined): obj is string | null'),
                TL.testFunction(JsTypeCommander.isStringOrNil, 'isStringOrNil', '(obj?: TDefined): obj is string | null | undefined'),
                TL.expectEqualToTrue(TL.argSet(() => [" "], '" "'), TL.argSet(() => [" \n\r "], '" \\n\\r "'), TL.argSet(() => ["Test"], '"Test"'), TL.argSet(() => [" Test "], '" Test "'))
            ),
            TL.functionGroup('Testing empty string type gate functions',
                TL.testFunction(JsTypeCommander.isEmptyString, 'isEmptyString', '(obj?: TDefined): obj is string',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isEmptyStringIfDef, 'isEmptyStringIfDef', '(obj?: TDefined): obj is string | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isEmptyStringOrNull, 'isEmptyStringOrNull', '(obj?: TDefined): obj is string | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isEmptyStringOrNil, 'isEmptyStringOrNil', '(obj?: TDefined): obj is string | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.expectEqualToFalse(TL.argSet(() => [" "], '" "'), TL.argSet(() => [" \n\r "], '" \\n\\r "'), TL.argSet(() => ["Test"], '"Test"'), TL.argSet(() => [" Test "], '" Test "'))
            ),
            TL.functionGroup('Testing whitespace string type gate functions',
                TL.testFunction(JsTypeCommander.isEmptyOrWhitespace, 'isEmptyOrWhitespace', '(obj?: TDefined): obj is string'),
                TL.testFunction(JsTypeCommander.isEmptyOrWhitespaceIfDef, 'isEmptyOrWhitespaceIfDef', '(obj?: TDefined): obj is string | undefined'),
                TL.testFunction(JsTypeCommander.isNullOrWhitespace, 'isNullOrWhitespace', '(obj?: TDefined): obj is string | null'),
                TL.testFunction(JsTypeCommander.isNilOrWhitespace, 'isNilOrWhitespace', '(obj?: TDefined): obj is string | null | undefined'),
                TL.expectEqualToTrue(TL.argSet(() => [" "], '" "'), TL.argSet(() => [" \n\r "], '" \\n\\r "')),
                TL.expectEqualToFalse(TL.argSet(() => ["Test"], '"Test"'), TL.argSet(() => [" Test "], '" Test "'))
            ),
            TL.expectEqualToTrue(TL.argSet(() => [""], '""')),
            TL.expectEqualToFalse(TL.argSet(() => [NaN], 'NaN'), TL.argSet(() => [0], '0'), TL.argSet(() => [false], 'false'), TL.argSet(() => [[]], '[]'), TL.argSet(() => [[""]], '[""]'),
                TL.argSet(() => [{}], '{}'), TL.argSet(() => [function() { return ""; }], 'function() { return ""; }'))
        ),
        TL.functionTypeGroup('boolean gate',
            TL.testFunction(JsTypeCommander.isBoolean, 'isBoolean', '(obj?: TDefined): obj is boolean',
                TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
            TL.testFunction(JsTypeCommander.isBooleanIfDef, 'isBooleanIfDef', '(obj?: TDefined): obj is boolean | undefined',
                TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
            TL.testFunction(JsTypeCommander.isBooleanOrNull, 'isBooleanOrNull', '(obj?: TDefined): obj is boolean | null',
                TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
            TL.testFunction(JsTypeCommander.isBooleanOrNil, 'isBooleanOrNil', '(obj?: TDefined): obj is boolean | null | undefined',
                TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
            TL.expectEqualToTrue(TL.argSet(() => [true], 'true'), TL.argSet(() => [false], 'false')),
            TL.expectEqualToFalse(TL.argSet(() => [NaN], 'NaN'), TL.argSet(() => [1], '1'), TL.argSet(() => [0], '0'), TL.argSet(() => [""], '""'), TL.argSet(() => ["true"], '"true"'),
                TL.argSet(() => ["false"], '"false"'), TL.argSet(() => [[]], '[]'), TL.argSet(() => [[true]], '[true]'), TL.argSet(() => [{}], '{}'),
                TL.argSet(() => [Symbol.iterator], 'Symbol.iterator'), TL.argSet(() => [function() { return true; }], 'function() { return true; }'))
        ),
        TL.functionTypeGroup('number gate',
            TL.expectationSet(
                TL.testFunction(JsTypeCommander.isNumber, 'isNumber', '(obj?: TDefined): obj is number',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"), TL.argSet(() => [NaN], "NaN"), TL.argSet(() => [Infinity], "Infinity"), TL.argSet(() => [Number.NEGATIVE_INFINITY], "Number.NEGATIVE_INFINITY"),
                    TL.argSet(() => [Number.POSITIVE_INFINITY], "Number.POSITIVE_INFINITY"))),
                TL.testFunction(JsTypeCommander.isNumberIfDef, 'isNumberIfDef', '(obj?: TDefined): obj is number | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"), TL.argSet(() => [NaN], "NaN"), TL.argSet(() => [Infinity], "Infinity"), TL.argSet(() => [Number.NEGATIVE_INFINITY], "Number.NEGATIVE_INFINITY"),
                    TL.argSet(() => [Number.POSITIVE_INFINITY], "Number.POSITIVE_INFINITY"))),
                TL.testFunction(JsTypeCommander.isNumberOrNull, 'isNumberOrNull', '(obj?: TDefined): obj is number | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [NaN], "NaN"), TL.argSet(() => [Infinity], "Infinity"), TL.argSet(() => [Number.NEGATIVE_INFINITY], "Number.NEGATIVE_INFINITY"),
                    TL.argSet(() => [Number.POSITIVE_INFINITY], "Number.POSITIVE_INFINITY"))),
                TL.testFunction(JsTypeCommander.isNumberOrNil, 'isNumberOrNil', '(obj?: TDefined): obj is number | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"), TL.argSet(() => [Infinity], "Infinity"), TL.argSet(() => [Number.NEGATIVE_INFINITY], "Number.NEGATIVE_INFINITY"),
                    TL.argSet(() => [Number.POSITIVE_INFINITY], "Number.POSITIVE_INFINITY"), TL.argSet(() => [NaN], "NaN"))),
                TL.expectEqualToTrue(TL.argSet(() => [1], '1'), TL.argSet(() => [0], '0'), TL.argSet(() => [0.0001], '0.0001'), TL.argSet(() => [-1], '-1'))
            ),
            TL.testFunction(JsTypeCommander.isNumberNaNorNull, 'isNumberNaNorNull', '(obj?: TDefined): obj is number | null',
                TL.expectEqualToTrue(TL.argSet(() => [null], "null"), TL.argSet(() => [NaN], "NaN"), TL.argSet(() => [1], '1'), TL.argSet(() => [0], '0'),
                    TL.argSet(() => [0.0001], '0.0001'), TL.argSet(() => [-1], '-1'), TL.argSet(() => [Infinity], "Infinity"),
                    TL.argSet(() => [Number.NEGATIVE_INFINITY], "Number.NEGATIVE_INFINITY"), TL.argSet(() => [Number.POSITIVE_INFINITY], "Number.POSITIVE_INFINITY")),
                TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
            TL.testFunction(JsTypeCommander.isInfinite, 'isInfinite', '(obj?: TDefined): obj is number',
                TL.expectEqualToTrue(TL.argSet(() => [Infinity], "Infinity"), TL.argSet(() => [Number.NEGATIVE_INFINITY], "Number.NEGATIVE_INFINITY"),
                    TL.argSet(() => [Number.POSITIVE_INFINITY], "Number.POSITIVE_INFINITY")),
                TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"), TL.argSet(() => [NaN], "NaN"),
                    TL.argSet(() => [1], '1'), TL.argSet(() => [0], '0'), TL.argSet(() => [0.0001], '0.0001'), TL.argSet(() => [-1], '-1'))),
            TL.expectEqualToFalse(TL.argSet(() => [true], 'true'), TL.argSet(() => [false], 'false'), TL.argSet(() => [""], '""'),
                TL.argSet(() => ["1"], '"1"'), TL.argSet(() => ["0"], '"0"'), TL.argSet(() => [[]], '[]'), TL.argSet(() => [[1]], '[1]'), TL.argSet(() => [[0]], '[0]'),
                TL.argSet(() => [{}], '{}'), TL.argSet(() => [Symbol.iterator], 'Symbol.iterator'), TL.argSet(() => [function() { return true; }], 'function() { return true; }'),
                TL.argSet(() => [function() { return true; }], 'function() { return NaN; }'))
        ),
        TL.functionTypeGroup('function gate',
            TL.testFunction(JsTypeCommander.isFunction, 'isFunction', '(obj?: TDefined): obj is Function',
                TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
            TL.testFunction(JsTypeCommander.isFunctionIfDef, 'isFunctionIfDef', '(obj?: TDefined): obj is Function | undefined',
                TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
            TL.testFunction(JsTypeCommander.isFunctionOrNull, 'isFunctionOrNull', '(obj?: TDefined): obj is Function | null',
                TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
            TL.testFunction(JsTypeCommander.isFunctionOrNil, 'isFunctionOrNil', '(obj?: TDefined): obj is Function | null | undefined',
                TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
            TL.expectEqualToTrue(TL.argSet(() => [function() { return true; }], 'function() { return true; }')),
            TL.expectEqualToFalse(TL.argSet(() => [NaN], 'NaN'), TL.argSet(() => [1], '1'), TL.argSet(() => [true], 'true'), TL.argSet(() => [""], '""'), TL.argSet(() => [[]], '[]'),
                TL.argSet(() => [[function() { return true; }]], '[function() { return true; }]'), TL.argSet(() => [{}], '{}'),
                TL.argSet(() => [Symbol.iterator], 'Symbol.iterator'))
        ),
        TL.functionTypeGroup('object gate',
            TL.functionGroup('Testing simple object type gate functions for object type',
                TL.testFunction(JsTypeCommander.isObjectType, 'isObjectType', '(obj?: TDefined): obj is object',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isObjectTypeIfDef, 'isObjectTypeIfDef', '(obj?: TDefined): obj is object | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isObjectTypeOrNull, 'isObjectTypeOrNull', '(obj?: TDefined): obj is object | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isObjectTypeOrNil, 'isObjectTypeOrNil', '(obj?: TDefined): obj is object | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null")))
            ),
            TL.functionGroup('Testing any object type gate functions for objects which can have any named property',
                TL.testFunction(JsTypeCommander.isObject, 'isObject', '(obj?: TDefined): obj is IStringKeyedObject',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isObjectIfDef, 'isObjectIfDef', '(obj?: TDefined): obj is IStringKeyedObject | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isObjectOrNull, 'isObjectOrNull', '(obj?: TDefined): obj is IStringKeyedObject | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isObjectOrNil, 'isObjectOrNil', '(obj?: TDefined): obj is IStringKeyedObject | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null")))
            ),
            TL.functionGroup('Testing type gate functions for non-array objects',
                TL.testFunction(JsTypeCommander.isNonArrayObject, 'isNonArrayObject', '(obj?: TDefined): obj is IStringKeyedObject',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isNonArrayObjectIfDef, 'isNonArrayObjectIfDef', '(obj?: TDefined): obj is IStringKeyedObject | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isNonArrayObjectOrNull, 'isNonArrayObjectOrNull', '(obj?: TDefined): obj is IStringKeyedObject | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isNonArrayObjectOrNil, 'isNonArrayObjectOrNil', '(obj?: TDefined): obj is IStringKeyedObject | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null")))
            ),
            TL.functionGroup('Testing type gate functions for plain objects',
                TL.testFunction(JsTypeCommander.isPlainObject, 'isPlainObject', '(obj?: TDefined): obj is IStringKeyedObject',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isPlainObjectIfDef, 'isPlainObjectIfDef', '(obj?: TDefined): obj is IStringKeyedObject | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isPlainObjectOrNull, 'isPlainObjectOrNull', '(obj?: TDefined): obj is IStringKeyedObject | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isPlainObjectOrNil, 'isPlainObjectOrNil', '(obj?: TDefined): obj is IStringKeyedObject | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null")))
            )
        ),
        TL.functionTypeGroup('Array gate',
            TL.functionGroup('Testing normal array type gate functions',
                TL.testFunction(JsTypeCommander.isArray, 'isObjectType', '(obj?: TDefined): obj is AnyNilable[]',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isArrayIfDef, 'isArrayIfDef', '(obj?: TDefined): obj is AnyNilable[] | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isArrayOrNull, 'isArrayOrNull', '(obj?: TDefined): obj is AnyNilable[] | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isArrayOrNil, 'isArrayOrNil', '(obj?: TDefined): obj is AnyNilable[] | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null")))
            ),
            TL.functionGroup('Testing normal array type gate functions',
                TL.testFunction(JsTypeCommander.isArray, 'isArray', '(obj?: TDefined): obj is AnyNilable[]',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isArrayIfDef, 'isArrayIfDef', '(obj?: TDefined): obj is AnyNilable[] | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isArrayOrNull, 'isArrayOrNull', '(obj?: TDefined): obj is AnyNilable[] | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isArrayOrNil, 'isArrayOrNil', '(obj?: TDefined): obj is AnyNilable[] | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null")))
            ),
            TL.functionGroup('Testing empty array type gate functions',
                TL.testFunction(JsTypeCommander.isEmptyArray, 'isEmptyArray', '(obj?: TDefined): obj is AnyNilable[]',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isEmptyArray, 'isEmptyArray', '(obj: TDefined, checkElements: boolean): obj is AnyNilable[]',
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isEmptyArrayIfDef, 'isEmptyArrayIfDef', '(obj?: TDefined): obj is AnyNilable[] | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isEmptyArrayIfDef, 'isEmptyArrayIfDef', '(obj: TDefined, checkElements: boolean): obj is AnyNilable[] | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isEmptyArrayOrNull, 'isEmptyArrayOrNull', '(obj?: TDefined): obj is AnyNilable[] | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isEmptyArrayOrNull, 'isEmptyArrayOrNull', '(obj: TDefined, checkElements: boolean): obj is AnyNilable[] | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isEmptyArrayOrNil, 'isEmptyArrayOrNil', '(obj?: TDefined): obj is AnyNilable[] | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isEmptyArrayOrNil, 'isEmptyArrayOrNil', '(obj: TDefined, checkElements: boolean): obj is AnyNilable[] | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null")))
            ),
            TL.functionGroup('Testing ArrayLike type gate functions',
                TL.testFunction(JsTypeCommander.isArrayLike, 'isArrayLike', '(obj?: TDefined): obj is ArrayLike<AnyNilable>',
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isArrayLike, 'isArrayLike', '(obj: TDefined, checkElements: boolean): obj is ArrayLike<AnyNilable>',
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isArrayLikeIfDef, 'isArrayLikeIfDef', '(obj?: TDefined): obj is ArrayLike<AnyNilable> | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isArrayLikeIfDef, 'isArrayLikeIfDef', '(obj: TDefined, checkElements: boolean): obj is ArrayLike<AnyNilable> | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.isArrayLikeOrNull, 'isArrayLikeOrNull', '(obj?: TDefined): obj is ArrayLike<AnyNilable> | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isArrayLikeOrNull, 'isArrayLikeOrNull', '(obj: TDefined, checkElements: boolean): obj is ArrayLike<AnyNilable> | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.isArrayLikeOrNil, 'isArrayLikeOrNil', '(obj?: TDefined): obj is ArrayLike<AnyNilable> | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                    TL.expectEqualToFalse(TL.argSet(() => [], ""), TL.argSet(() => [undefined], "undefined")),
                TL.testFunction(JsTypeCommander.isArrayLikeOrNil, 'isArrayLikeOrNil', '(obj: TDefined, checkElements: boolean): obj is ArrayLike<AnyNilable> | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null")))
            )
        ),
        TL.functionTypeGroup('derrivation gate',
            TL.genericFunctionGroup('Testing Error class derrivation functions', () => [Error],
                TL.testFunction(JsTypeCommander.derivesFrom, 'derivesFrom<Error>', '(obj?: TDefined, Error): obj is Error',
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.derivesFromIfDef, 'derivesFromIfDef<Error>', '(obj?: TDefined, Error): obj is Error | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.derivesFromOrNull, 'derivesFromOrNull<Error>', '(obj?: TDefined, Error): obj is Error | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.derivesFromOrNil, 'derivesFromOrNil<Error>', '(obj?: TDefined, Error): obj is Error | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.expectEqualToTrue(TL.argSet(() => [new Error()], 'new Error()'), TL.argSet(() => [new RangeError()], 'new RangeError()')),
                TL.expectEqualToFalse(TL.argSet(() => [new TL.TestErrorLike()], 'new TestErrorLike()'), TL.argSet(() => [NaN], 'NaN'), TL.argSet(() => [1], '1'),
                    TL.argSet(() => [true], 'true'), TL.argSet(() => [[]], '[]'), TL.argSet(() => [[new Error()]], '[new Error()]'))
            ),
            TL.genericFunctionGroup('Testing Error class derrivation functions', () => [RangeError],
                TL.testFunction(JsTypeCommander.derivesFrom, 'derivesFrom<RangeError>', '(obj?: TDefined, RangeError): obj is RangeError',
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.derivesFromIfDef, 'derivesFromIfDef<RangeError>', '(obj?: TDefined, RangeError): obj is RangeError | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.derivesFromOrNull, 'derivesFromOrNull<RangeError>', '(obj?: TDefined, RangeError): obj is RangeError | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.derivesFromOrNil, 'derivesFromOrNil<RangeError>', '(obj?: TDefined, RangeError): obj is RangeError | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.expectEqualToTrue(TL.argSet(() => [new RangeError()], 'new RangeError()')),
                TL.expectEqualToFalse(TL.argSet(() => [new Error()], 'new Error()'), TL.argSet(() => [new TL.TestErrorLike()], 'new TestErrorLike()'), TL.argSet(() => [NaN], 'NaN'), TL.argSet(() => [1], '1'),
                    TL.argSet(() => [true], 'true'), TL.argSet(() => [[]], '[]'), TL.argSet(() => [[new RangeError()]], '[new RangeError()]'))
            ),
            TL.genericFunctionGroup('Testing custom class derrivation functions', () => [TL.TestErrorLike],
                TL.testFunction(JsTypeCommander.derivesFrom, 'derivesFrom<TestErrorLike>', '(obj?: TDefined, TestErrorLike): obj is TestErrorLike',
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.derivesFromIfDef, 'derivesFromIfDef<TestErrorLike>', '(obj?: TDefined, TestErrorLike): obj is TestErrorLike | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined")),
                    TL.expectEqualToFalse(TL.argSet(() => [null], "null"))),
                TL.testFunction(JsTypeCommander.derivesFromOrNull, 'derivesFromOrNull<TestErrorLike>', '(obj?: TDefined, TestErrorLike): obj is TestErrorLike | null',
                    TL.expectEqualToTrue(TL.argSet(() => [null], "null")),
                    TL.expectEqualToFalse(TL.argSet(() => [undefined], "undefined"))),
                TL.testFunction(JsTypeCommander.derivesFromOrNil, 'derivesFromOrNil<TestErrorLike>', '(obj?: TDefined, TestErrorLike): obj is TestErrorLike | null | undefined',
                    TL.expectEqualToTrue(TL.argSet(() => [undefined], "undefined"), TL.argSet(() => [null], "null"))),
                TL.expectEqualToTrue(TL.argSet(() => [new TL.TestErrorLike()], 'new TestErrorLike()'), TL.argSet(() => [new TL.TestErrorLike2()], 'new TestErrorLike2()'), TL.argSet(() => [new TL.TestErrorLike3()], 'new TestErrorLike3()')),
                TL.expectEqualToFalse(TL.argSet(() => [new RangeError()], 'new RangeError()'), TL.argSet(() => [new Error()], 'new Error()'), TL.argSet(() => [new TL.TestErrorLike()], 'new TestErrorLike()'), TL.argSet(() => [NaN], 'NaN'), TL.argSet(() => [1], '1'),
                    TL.argSet(() => [true], 'true'), TL.argSet(() => [[]], '[]'), TL.argSet(() => [[new RangeError()]], '[new RangeError()]'))
            )
        ),
        TL.functionTypeGroup('ErrorLike gate',
            TL.testFunction(JsTypeCommander.isErrorLike, 'isErrorLike', '(obj?: TDefined): obj is boolean',
                TL.expectEqualToTrue(TL.argSet(() => [new RangeError()], 'new RangeError()'), TL.argSet(() => [new Error()], 'new Error()'),
                    TL.argSet(() => [new TL.TestErrorLike()], 'new TestErrorLike()'), TL.argSet(() => [new TL.TestErrorLike2()], 'new TestErrorLike2()')),
                TL.expectEqualToFalse(TL.argSet(() => [NaN], 'NaN'), TL.argSet(() => [1], '1'), TL.argSet(() => [0], '0'), TL.argSet(() => [""], '""'), TL.argSet(() => ["true"], '"true"'),
                    TL.argSet(() => ["false"], '"false"'), TL.argSet(() => [[]], '[]'), TL.argSet(() => [[true]], '[true]'), TL.argSet(() => [{}], '{}'),
                    TL.argSet(() => [Symbol.iterator], 'Symbol.iterator'), TL.argSet(() => [function() { return true; }], 'function() { return true; }')))
        )
    ];
    TL.describeFunctionTypeGroups(functionTypeGroups);
});